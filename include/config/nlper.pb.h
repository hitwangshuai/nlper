// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: nlper.proto

#ifndef PROTOBUF_nlper_2eproto__INCLUDED
#define PROTOBUF_nlper_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3001000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3001000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace nlper {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_nlper_2eproto();
void protobuf_InitDefaults_nlper_2eproto();
void protobuf_AssignDesc_nlper_2eproto();
void protobuf_ShutdownFile_nlper_2eproto();

class AnalysisConfig;
class AnalysisMethodConfig;
class DictConfig;
class DictManagerConfig;
class MatchConfig;
class MatchingConfig;
class NlperStrategyConfig;
class PatternConfig;
class ReqPostprocPluginConfig;
class ReqPreprocPluginConfig;
class ServerConfig;

// ===================================================================

class DictConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:nlper.DictConfig) */ {
 public:
  DictConfig();
  virtual ~DictConfig();

  DictConfig(const DictConfig& from);

  inline DictConfig& operator=(const DictConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DictConfig& default_instance();

  static const DictConfig* internal_default_instance();

  void Swap(DictConfig* other);

  // implements Message ----------------------------------------------

  inline DictConfig* New() const { return New(NULL); }

  DictConfig* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DictConfig& from);
  void MergeFrom(const DictConfig& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DictConfig* other);
  void UnsafeMergeFrom(const DictConfig& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // required string type = 2;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  const ::std::string& type() const;
  void set_type(const ::std::string& value);
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  ::std::string* mutable_type();
  ::std::string* release_type();
  void set_allocated_type(::std::string* type);

  // required string path = 3;
  bool has_path() const;
  void clear_path();
  static const int kPathFieldNumber = 3;
  const ::std::string& path() const;
  void set_path(const ::std::string& value);
  void set_path(const char* value);
  void set_path(const char* value, size_t size);
  ::std::string* mutable_path();
  ::std::string* release_path();
  void set_allocated_path(::std::string* path);

  // optional string blob_name = 4;
  bool has_blob_name() const;
  void clear_blob_name();
  static const int kBlobNameFieldNumber = 4;
  const ::std::string& blob_name() const;
  void set_blob_name(const ::std::string& value);
  void set_blob_name(const char* value);
  void set_blob_name(const char* value, size_t size);
  ::std::string* mutable_blob_name();
  ::std::string* release_blob_name();
  void set_allocated_blob_name(::std::string* blob_name);

  // optional bool is_reload_able = 5;
  bool has_is_reload_able() const;
  void clear_is_reload_able();
  static const int kIsReloadAbleFieldNumber = 5;
  bool is_reload_able() const;
  void set_is_reload_able(bool value);

  // @@protoc_insertion_point(class_scope:nlper.DictConfig)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_path();
  inline void clear_has_path();
  inline void set_has_blob_name();
  inline void clear_has_blob_name();
  inline void set_has_is_reload_able();
  inline void clear_has_is_reload_able();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr type_;
  ::google::protobuf::internal::ArenaStringPtr path_;
  ::google::protobuf::internal::ArenaStringPtr blob_name_;
  bool is_reload_able_;
  friend void  protobuf_InitDefaults_nlper_2eproto_impl();
  friend void  protobuf_AddDesc_nlper_2eproto_impl();
  friend void protobuf_AssignDesc_nlper_2eproto();
  friend void protobuf_ShutdownFile_nlper_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<DictConfig> DictConfig_default_instance_;

// -------------------------------------------------------------------

class DictManagerConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:nlper.DictManagerConfig) */ {
 public:
  DictManagerConfig();
  virtual ~DictManagerConfig();

  DictManagerConfig(const DictManagerConfig& from);

  inline DictManagerConfig& operator=(const DictManagerConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DictManagerConfig& default_instance();

  static const DictManagerConfig* internal_default_instance();

  void Swap(DictManagerConfig* other);

  // implements Message ----------------------------------------------

  inline DictManagerConfig* New() const { return New(NULL); }

  DictManagerConfig* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DictManagerConfig& from);
  void MergeFrom(const DictManagerConfig& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DictManagerConfig* other);
  void UnsafeMergeFrom(const DictManagerConfig& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // repeated .nlper.DictConfig dict_config = 2;
  int dict_config_size() const;
  void clear_dict_config();
  static const int kDictConfigFieldNumber = 2;
  const ::nlper::DictConfig& dict_config(int index) const;
  ::nlper::DictConfig* mutable_dict_config(int index);
  ::nlper::DictConfig* add_dict_config();
  ::google::protobuf::RepeatedPtrField< ::nlper::DictConfig >*
      mutable_dict_config();
  const ::google::protobuf::RepeatedPtrField< ::nlper::DictConfig >&
      dict_config() const;

  // @@protoc_insertion_point(class_scope:nlper.DictManagerConfig)
 private:
  inline void set_has_name();
  inline void clear_has_name();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::nlper::DictConfig > dict_config_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  friend void  protobuf_InitDefaults_nlper_2eproto_impl();
  friend void  protobuf_AddDesc_nlper_2eproto_impl();
  friend void protobuf_AssignDesc_nlper_2eproto();
  friend void protobuf_ShutdownFile_nlper_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<DictManagerConfig> DictManagerConfig_default_instance_;

// -------------------------------------------------------------------

class AnalysisMethodConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:nlper.AnalysisMethodConfig) */ {
 public:
  AnalysisMethodConfig();
  virtual ~AnalysisMethodConfig();

  AnalysisMethodConfig(const AnalysisMethodConfig& from);

  inline AnalysisMethodConfig& operator=(const AnalysisMethodConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AnalysisMethodConfig& default_instance();

  static const AnalysisMethodConfig* internal_default_instance();

  void Swap(AnalysisMethodConfig* other);

  // implements Message ----------------------------------------------

  inline AnalysisMethodConfig* New() const { return New(NULL); }

  AnalysisMethodConfig* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AnalysisMethodConfig& from);
  void MergeFrom(const AnalysisMethodConfig& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AnalysisMethodConfig* other);
  void UnsafeMergeFrom(const AnalysisMethodConfig& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // required string type = 2;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  const ::std::string& type() const;
  void set_type(const ::std::string& value);
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  ::std::string* mutable_type();
  ::std::string* release_type();
  void set_allocated_type(::std::string* type);

  // required uint32 level = 3;
  bool has_level() const;
  void clear_level();
  static const int kLevelFieldNumber = 3;
  ::google::protobuf::uint32 level() const;
  void set_level(::google::protobuf::uint32 value);

  // required string using_dict_name = 4;
  bool has_using_dict_name() const;
  void clear_using_dict_name();
  static const int kUsingDictNameFieldNumber = 4;
  const ::std::string& using_dict_name() const;
  void set_using_dict_name(const ::std::string& value);
  void set_using_dict_name(const char* value);
  void set_using_dict_name(const char* value, size_t size);
  ::std::string* mutable_using_dict_name();
  ::std::string* release_using_dict_name();
  void set_allocated_using_dict_name(::std::string* using_dict_name);

  // optional bool need_phrase_seg = 5;
  bool has_need_phrase_seg() const;
  void clear_need_phrase_seg();
  static const int kNeedPhraseSegFieldNumber = 5;
  bool need_phrase_seg() const;
  void set_need_phrase_seg(bool value);

  // optional uint32 thread_num = 6;
  bool has_thread_num() const;
  void clear_thread_num();
  static const int kThreadNumFieldNumber = 6;
  ::google::protobuf::uint32 thread_num() const;
  void set_thread_num(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:nlper.AnalysisMethodConfig)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_using_dict_name();
  inline void clear_has_using_dict_name();
  inline void set_has_need_phrase_seg();
  inline void clear_has_need_phrase_seg();
  inline void set_has_thread_num();
  inline void clear_has_thread_num();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr type_;
  ::google::protobuf::internal::ArenaStringPtr using_dict_name_;
  ::google::protobuf::uint32 level_;
  bool need_phrase_seg_;
  ::google::protobuf::uint32 thread_num_;
  friend void  protobuf_InitDefaults_nlper_2eproto_impl();
  friend void  protobuf_AddDesc_nlper_2eproto_impl();
  friend void protobuf_AssignDesc_nlper_2eproto();
  friend void protobuf_ShutdownFile_nlper_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<AnalysisMethodConfig> AnalysisMethodConfig_default_instance_;

// -------------------------------------------------------------------

class AnalysisConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:nlper.AnalysisConfig) */ {
 public:
  AnalysisConfig();
  virtual ~AnalysisConfig();

  AnalysisConfig(const AnalysisConfig& from);

  inline AnalysisConfig& operator=(const AnalysisConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AnalysisConfig& default_instance();

  static const AnalysisConfig* internal_default_instance();

  void Swap(AnalysisConfig* other);

  // implements Message ----------------------------------------------

  inline AnalysisConfig* New() const { return New(NULL); }

  AnalysisConfig* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AnalysisConfig& from);
  void MergeFrom(const AnalysisConfig& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AnalysisConfig* other);
  void UnsafeMergeFrom(const AnalysisConfig& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional string hide_tag = 2;
  bool has_hide_tag() const;
  void clear_hide_tag();
  static const int kHideTagFieldNumber = 2;
  const ::std::string& hide_tag() const;
  void set_hide_tag(const ::std::string& value);
  void set_hide_tag(const char* value);
  void set_hide_tag(const char* value, size_t size);
  ::std::string* mutable_hide_tag();
  ::std::string* release_hide_tag();
  void set_allocated_hide_tag(::std::string* hide_tag);

  // repeated .nlper.AnalysisMethodConfig analysis_method = 3;
  int analysis_method_size() const;
  void clear_analysis_method();
  static const int kAnalysisMethodFieldNumber = 3;
  const ::nlper::AnalysisMethodConfig& analysis_method(int index) const;
  ::nlper::AnalysisMethodConfig* mutable_analysis_method(int index);
  ::nlper::AnalysisMethodConfig* add_analysis_method();
  ::google::protobuf::RepeatedPtrField< ::nlper::AnalysisMethodConfig >*
      mutable_analysis_method();
  const ::google::protobuf::RepeatedPtrField< ::nlper::AnalysisMethodConfig >&
      analysis_method() const;

  // @@protoc_insertion_point(class_scope:nlper.AnalysisConfig)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_hide_tag();
  inline void clear_has_hide_tag();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::nlper::AnalysisMethodConfig > analysis_method_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr hide_tag_;
  friend void  protobuf_InitDefaults_nlper_2eproto_impl();
  friend void  protobuf_AddDesc_nlper_2eproto_impl();
  friend void protobuf_AssignDesc_nlper_2eproto();
  friend void protobuf_ShutdownFile_nlper_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<AnalysisConfig> AnalysisConfig_default_instance_;

// -------------------------------------------------------------------

class PatternConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:nlper.PatternConfig) */ {
 public:
  PatternConfig();
  virtual ~PatternConfig();

  PatternConfig(const PatternConfig& from);

  inline PatternConfig& operator=(const PatternConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PatternConfig& default_instance();

  static const PatternConfig* internal_default_instance();

  void Swap(PatternConfig* other);

  // implements Message ----------------------------------------------

  inline PatternConfig* New() const { return New(NULL); }

  PatternConfig* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PatternConfig& from);
  void MergeFrom(const PatternConfig& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PatternConfig* other);
  void UnsafeMergeFrom(const PatternConfig& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string pat_fname = 1;
  bool has_pat_fname() const;
  void clear_pat_fname();
  static const int kPatFnameFieldNumber = 1;
  const ::std::string& pat_fname() const;
  void set_pat_fname(const ::std::string& value);
  void set_pat_fname(const char* value);
  void set_pat_fname(const char* value, size_t size);
  ::std::string* mutable_pat_fname();
  ::std::string* release_pat_fname();
  void set_allocated_pat_fname(::std::string* pat_fname);

  // required string dict_fname = 2;
  bool has_dict_fname() const;
  void clear_dict_fname();
  static const int kDictFnameFieldNumber = 2;
  const ::std::string& dict_fname() const;
  void set_dict_fname(const ::std::string& value);
  void set_dict_fname(const char* value);
  void set_dict_fname(const char* value, size_t size);
  ::std::string* mutable_dict_fname();
  ::std::string* release_dict_fname();
  void set_allocated_dict_fname(::std::string* dict_fname);

  // required string igno_fname = 3;
  bool has_igno_fname() const;
  void clear_igno_fname();
  static const int kIgnoFnameFieldNumber = 3;
  const ::std::string& igno_fname() const;
  void set_igno_fname(const ::std::string& value);
  void set_igno_fname(const char* value);
  void set_igno_fname(const char* value, size_t size);
  ::std::string* mutable_igno_fname();
  ::std::string* release_igno_fname();
  void set_allocated_igno_fname(::std::string* igno_fname);

  // @@protoc_insertion_point(class_scope:nlper.PatternConfig)
 private:
  inline void set_has_pat_fname();
  inline void clear_has_pat_fname();
  inline void set_has_dict_fname();
  inline void clear_has_dict_fname();
  inline void set_has_igno_fname();
  inline void clear_has_igno_fname();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr pat_fname_;
  ::google::protobuf::internal::ArenaStringPtr dict_fname_;
  ::google::protobuf::internal::ArenaStringPtr igno_fname_;
  friend void  protobuf_InitDefaults_nlper_2eproto_impl();
  friend void  protobuf_AddDesc_nlper_2eproto_impl();
  friend void protobuf_AssignDesc_nlper_2eproto();
  friend void protobuf_ShutdownFile_nlper_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<PatternConfig> PatternConfig_default_instance_;

// -------------------------------------------------------------------

class MatchingConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:nlper.MatchingConfig) */ {
 public:
  MatchingConfig();
  virtual ~MatchingConfig();

  MatchingConfig(const MatchingConfig& from);

  inline MatchingConfig& operator=(const MatchingConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MatchingConfig& default_instance();

  static const MatchingConfig* internal_default_instance();

  void Swap(MatchingConfig* other);

  // implements Message ----------------------------------------------

  inline MatchingConfig* New() const { return New(NULL); }

  MatchingConfig* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MatchingConfig& from);
  void MergeFrom(const MatchingConfig& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MatchingConfig* other);
  void UnsafeMergeFrom(const MatchingConfig& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // required string type = 2;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  const ::std::string& type() const;
  void set_type(const ::std::string& value);
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  ::std::string* mutable_type();
  ::std::string* release_type();
  void set_allocated_type(::std::string* type);

  // optional string using_dict_name = 3;
  bool has_using_dict_name() const;
  void clear_using_dict_name();
  static const int kUsingDictNameFieldNumber = 3;
  const ::std::string& using_dict_name() const;
  void set_using_dict_name(const ::std::string& value);
  void set_using_dict_name(const char* value);
  void set_using_dict_name(const char* value, size_t size);
  ::std::string* mutable_using_dict_name();
  ::std::string* release_using_dict_name();
  void set_allocated_using_dict_name(::std::string* using_dict_name);

  // required int32 output_num = 4;
  bool has_output_num() const;
  void clear_output_num();
  static const int kOutputNumFieldNumber = 4;
  ::google::protobuf::int32 output_num() const;
  void set_output_num(::google::protobuf::int32 value);

  // required float feature_weight = 5;
  bool has_feature_weight() const;
  void clear_feature_weight();
  static const int kFeatureWeightFieldNumber = 5;
  float feature_weight() const;
  void set_feature_weight(float value);

  // optional .nlper.PatternConfig pattern = 6;
  bool has_pattern() const;
  void clear_pattern();
  static const int kPatternFieldNumber = 6;
  const ::nlper::PatternConfig& pattern() const;
  ::nlper::PatternConfig* mutable_pattern();
  ::nlper::PatternConfig* release_pattern();
  void set_allocated_pattern(::nlper::PatternConfig* pattern);

  // @@protoc_insertion_point(class_scope:nlper.MatchingConfig)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_using_dict_name();
  inline void clear_has_using_dict_name();
  inline void set_has_output_num();
  inline void clear_has_output_num();
  inline void set_has_feature_weight();
  inline void clear_has_feature_weight();
  inline void set_has_pattern();
  inline void clear_has_pattern();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr type_;
  ::google::protobuf::internal::ArenaStringPtr using_dict_name_;
  ::nlper::PatternConfig* pattern_;
  ::google::protobuf::int32 output_num_;
  float feature_weight_;
  friend void  protobuf_InitDefaults_nlper_2eproto_impl();
  friend void  protobuf_AddDesc_nlper_2eproto_impl();
  friend void protobuf_AssignDesc_nlper_2eproto();
  friend void protobuf_ShutdownFile_nlper_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<MatchingConfig> MatchingConfig_default_instance_;

// -------------------------------------------------------------------

class MatchConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:nlper.MatchConfig) */ {
 public:
  MatchConfig();
  virtual ~MatchConfig();

  MatchConfig(const MatchConfig& from);

  inline MatchConfig& operator=(const MatchConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MatchConfig& default_instance();

  static const MatchConfig* internal_default_instance();

  void Swap(MatchConfig* other);

  // implements Message ----------------------------------------------

  inline MatchConfig* New() const { return New(NULL); }

  MatchConfig* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MatchConfig& from);
  void MergeFrom(const MatchConfig& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MatchConfig* other);
  void UnsafeMergeFrom(const MatchConfig& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // repeated .nlper.MatchingConfig matching_config = 2;
  int matching_config_size() const;
  void clear_matching_config();
  static const int kMatchingConfigFieldNumber = 2;
  const ::nlper::MatchingConfig& matching_config(int index) const;
  ::nlper::MatchingConfig* mutable_matching_config(int index);
  ::nlper::MatchingConfig* add_matching_config();
  ::google::protobuf::RepeatedPtrField< ::nlper::MatchingConfig >*
      mutable_matching_config();
  const ::google::protobuf::RepeatedPtrField< ::nlper::MatchingConfig >&
      matching_config() const;

  // @@protoc_insertion_point(class_scope:nlper.MatchConfig)
 private:
  inline void set_has_name();
  inline void clear_has_name();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::nlper::MatchingConfig > matching_config_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  friend void  protobuf_InitDefaults_nlper_2eproto_impl();
  friend void  protobuf_AddDesc_nlper_2eproto_impl();
  friend void protobuf_AssignDesc_nlper_2eproto();
  friend void protobuf_ShutdownFile_nlper_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<MatchConfig> MatchConfig_default_instance_;

// -------------------------------------------------------------------

class NlperStrategyConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:nlper.NlperStrategyConfig) */ {
 public:
  NlperStrategyConfig();
  virtual ~NlperStrategyConfig();

  NlperStrategyConfig(const NlperStrategyConfig& from);

  inline NlperStrategyConfig& operator=(const NlperStrategyConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NlperStrategyConfig& default_instance();

  static const NlperStrategyConfig* internal_default_instance();

  void Swap(NlperStrategyConfig* other);

  // implements Message ----------------------------------------------

  inline NlperStrategyConfig* New() const { return New(NULL); }

  NlperStrategyConfig* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NlperStrategyConfig& from);
  void MergeFrom(const NlperStrategyConfig& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(NlperStrategyConfig* other);
  void UnsafeMergeFrom(const NlperStrategyConfig& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string analysis_config = 1;
  bool has_analysis_config() const;
  void clear_analysis_config();
  static const int kAnalysisConfigFieldNumber = 1;
  const ::std::string& analysis_config() const;
  void set_analysis_config(const ::std::string& value);
  void set_analysis_config(const char* value);
  void set_analysis_config(const char* value, size_t size);
  ::std::string* mutable_analysis_config();
  ::std::string* release_analysis_config();
  void set_allocated_analysis_config(::std::string* analysis_config);

  // optional string match_config = 2;
  bool has_match_config() const;
  void clear_match_config();
  static const int kMatchConfigFieldNumber = 2;
  const ::std::string& match_config() const;
  void set_match_config(const ::std::string& value);
  void set_match_config(const char* value);
  void set_match_config(const char* value, size_t size);
  ::std::string* mutable_match_config();
  ::std::string* release_match_config();
  void set_allocated_match_config(::std::string* match_config);

  // @@protoc_insertion_point(class_scope:nlper.NlperStrategyConfig)
 private:
  inline void set_has_analysis_config();
  inline void clear_has_analysis_config();
  inline void set_has_match_config();
  inline void clear_has_match_config();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr analysis_config_;
  ::google::protobuf::internal::ArenaStringPtr match_config_;
  friend void  protobuf_InitDefaults_nlper_2eproto_impl();
  friend void  protobuf_AddDesc_nlper_2eproto_impl();
  friend void protobuf_AssignDesc_nlper_2eproto();
  friend void protobuf_ShutdownFile_nlper_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<NlperStrategyConfig> NlperStrategyConfig_default_instance_;

// -------------------------------------------------------------------

class ReqPreprocPluginConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:nlper.ReqPreprocPluginConfig) */ {
 public:
  ReqPreprocPluginConfig();
  virtual ~ReqPreprocPluginConfig();

  ReqPreprocPluginConfig(const ReqPreprocPluginConfig& from);

  inline ReqPreprocPluginConfig& operator=(const ReqPreprocPluginConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqPreprocPluginConfig& default_instance();

  static const ReqPreprocPluginConfig* internal_default_instance();

  void Swap(ReqPreprocPluginConfig* other);

  // implements Message ----------------------------------------------

  inline ReqPreprocPluginConfig* New() const { return New(NULL); }

  ReqPreprocPluginConfig* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReqPreprocPluginConfig& from);
  void MergeFrom(const ReqPreprocPluginConfig& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ReqPreprocPluginConfig* other);
  void UnsafeMergeFrom(const ReqPreprocPluginConfig& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string type = 1;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  const ::std::string& type() const;
  void set_type(const ::std::string& value);
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  ::std::string* mutable_type();
  ::std::string* release_type();
  void set_allocated_type(::std::string* type);

  // required string name = 2;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:nlper.ReqPreprocPluginConfig)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_name();
  inline void clear_has_name();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr type_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  friend void  protobuf_InitDefaults_nlper_2eproto_impl();
  friend void  protobuf_AddDesc_nlper_2eproto_impl();
  friend void protobuf_AssignDesc_nlper_2eproto();
  friend void protobuf_ShutdownFile_nlper_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<ReqPreprocPluginConfig> ReqPreprocPluginConfig_default_instance_;

// -------------------------------------------------------------------

class ReqPostprocPluginConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:nlper.ReqPostprocPluginConfig) */ {
 public:
  ReqPostprocPluginConfig();
  virtual ~ReqPostprocPluginConfig();

  ReqPostprocPluginConfig(const ReqPostprocPluginConfig& from);

  inline ReqPostprocPluginConfig& operator=(const ReqPostprocPluginConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqPostprocPluginConfig& default_instance();

  static const ReqPostprocPluginConfig* internal_default_instance();

  void Swap(ReqPostprocPluginConfig* other);

  // implements Message ----------------------------------------------

  inline ReqPostprocPluginConfig* New() const { return New(NULL); }

  ReqPostprocPluginConfig* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReqPostprocPluginConfig& from);
  void MergeFrom(const ReqPostprocPluginConfig& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ReqPostprocPluginConfig* other);
  void UnsafeMergeFrom(const ReqPostprocPluginConfig& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string type = 1;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  const ::std::string& type() const;
  void set_type(const ::std::string& value);
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  ::std::string* mutable_type();
  ::std::string* release_type();
  void set_allocated_type(::std::string* type);

  // required string name = 2;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:nlper.ReqPostprocPluginConfig)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_name();
  inline void clear_has_name();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr type_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  friend void  protobuf_InitDefaults_nlper_2eproto_impl();
  friend void  protobuf_AddDesc_nlper_2eproto_impl();
  friend void protobuf_AssignDesc_nlper_2eproto();
  friend void protobuf_ShutdownFile_nlper_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<ReqPostprocPluginConfig> ReqPostprocPluginConfig_default_instance_;

// -------------------------------------------------------------------

class ServerConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:nlper.ServerConfig) */ {
 public:
  ServerConfig();
  virtual ~ServerConfig();

  ServerConfig(const ServerConfig& from);

  inline ServerConfig& operator=(const ServerConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ServerConfig& default_instance();

  static const ServerConfig* internal_default_instance();

  void Swap(ServerConfig* other);

  // implements Message ----------------------------------------------

  inline ServerConfig* New() const { return New(NULL); }

  ServerConfig* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ServerConfig& from);
  void MergeFrom(const ServerConfig& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ServerConfig* other);
  void UnsafeMergeFrom(const ServerConfig& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 idle_timeout_sec = 1;
  bool has_idle_timeout_sec() const;
  void clear_idle_timeout_sec();
  static const int kIdleTimeoutSecFieldNumber = 1;
  ::google::protobuf::int32 idle_timeout_sec() const;
  void set_idle_timeout_sec(::google::protobuf::int32 value);

  // required int32 max_concurrency = 2;
  bool has_max_concurrency() const;
  void clear_max_concurrency();
  static const int kMaxConcurrencyFieldNumber = 2;
  ::google::protobuf::int32 max_concurrency() const;
  void set_max_concurrency(::google::protobuf::int32 value);

  // required string port = 3;
  bool has_port() const;
  void clear_port();
  static const int kPortFieldNumber = 3;
  const ::std::string& port() const;
  void set_port(const ::std::string& value);
  void set_port(const char* value);
  void set_port(const char* value, size_t size);
  ::std::string* mutable_port();
  ::std::string* release_port();
  void set_allocated_port(::std::string* port);

  // required string method = 4;
  bool has_method() const;
  void clear_method();
  static const int kMethodFieldNumber = 4;
  const ::std::string& method() const;
  void set_method(const ::std::string& value);
  void set_method(const char* value);
  void set_method(const char* value, size_t size);
  ::std::string* mutable_method();
  ::std::string* release_method();
  void set_allocated_method(::std::string* method);

  // required string server_conf_dir = 5;
  bool has_server_conf_dir() const;
  void clear_server_conf_dir();
  static const int kServerConfDirFieldNumber = 5;
  const ::std::string& server_conf_dir() const;
  void set_server_conf_dir(const ::std::string& value);
  void set_server_conf_dir(const char* value);
  void set_server_conf_dir(const char* value, size_t size);
  ::std::string* mutable_server_conf_dir();
  ::std::string* release_server_conf_dir();
  void set_allocated_server_conf_dir(::std::string* server_conf_dir);

  // required string log_conf_file = 6;
  bool has_log_conf_file() const;
  void clear_log_conf_file();
  static const int kLogConfFileFieldNumber = 6;
  const ::std::string& log_conf_file() const;
  void set_log_conf_file(const ::std::string& value);
  void set_log_conf_file(const char* value);
  void set_log_conf_file(const char* value, size_t size);
  ::std::string* mutable_log_conf_file();
  ::std::string* release_log_conf_file();
  void set_allocated_log_conf_file(::std::string* log_conf_file);

  // required string nlper_dict_conf_dir = 7;
  bool has_nlper_dict_conf_dir() const;
  void clear_nlper_dict_conf_dir();
  static const int kNlperDictConfDirFieldNumber = 7;
  const ::std::string& nlper_dict_conf_dir() const;
  void set_nlper_dict_conf_dir(const ::std::string& value);
  void set_nlper_dict_conf_dir(const char* value);
  void set_nlper_dict_conf_dir(const char* value, size_t size);
  ::std::string* mutable_nlper_dict_conf_dir();
  ::std::string* release_nlper_dict_conf_dir();
  void set_allocated_nlper_dict_conf_dir(::std::string* nlper_dict_conf_dir);

  // required string nlper_conf_dir = 8;
  bool has_nlper_conf_dir() const;
  void clear_nlper_conf_dir();
  static const int kNlperConfDirFieldNumber = 8;
  const ::std::string& nlper_conf_dir() const;
  void set_nlper_conf_dir(const ::std::string& value);
  void set_nlper_conf_dir(const char* value);
  void set_nlper_conf_dir(const char* value, size_t size);
  ::std::string* mutable_nlper_conf_dir();
  ::std::string* release_nlper_conf_dir();
  void set_allocated_nlper_conf_dir(::std::string* nlper_conf_dir);

  // required .nlper.ReqPreprocPluginConfig qdmatch_preproc_plugin = 9;
  bool has_qdmatch_preproc_plugin() const;
  void clear_qdmatch_preproc_plugin();
  static const int kQdmatchPreprocPluginFieldNumber = 9;
  const ::nlper::ReqPreprocPluginConfig& qdmatch_preproc_plugin() const;
  ::nlper::ReqPreprocPluginConfig* mutable_qdmatch_preproc_plugin();
  ::nlper::ReqPreprocPluginConfig* release_qdmatch_preproc_plugin();
  void set_allocated_qdmatch_preproc_plugin(::nlper::ReqPreprocPluginConfig* qdmatch_preproc_plugin);

  // required .nlper.ReqPostprocPluginConfig qdmatch_postproc_plugin = 10;
  bool has_qdmatch_postproc_plugin() const;
  void clear_qdmatch_postproc_plugin();
  static const int kQdmatchPostprocPluginFieldNumber = 10;
  const ::nlper::ReqPostprocPluginConfig& qdmatch_postproc_plugin() const;
  ::nlper::ReqPostprocPluginConfig* mutable_qdmatch_postproc_plugin();
  ::nlper::ReqPostprocPluginConfig* release_qdmatch_postproc_plugin();
  void set_allocated_qdmatch_postproc_plugin(::nlper::ReqPostprocPluginConfig* qdmatch_postproc_plugin);

  // required .nlper.ReqPreprocPluginConfig ddmatch_preproc_plugin = 11;
  bool has_ddmatch_preproc_plugin() const;
  void clear_ddmatch_preproc_plugin();
  static const int kDdmatchPreprocPluginFieldNumber = 11;
  const ::nlper::ReqPreprocPluginConfig& ddmatch_preproc_plugin() const;
  ::nlper::ReqPreprocPluginConfig* mutable_ddmatch_preproc_plugin();
  ::nlper::ReqPreprocPluginConfig* release_ddmatch_preproc_plugin();
  void set_allocated_ddmatch_preproc_plugin(::nlper::ReqPreprocPluginConfig* ddmatch_preproc_plugin);

  // required .nlper.ReqPostprocPluginConfig ddmatch_postproc_plugin = 12;
  bool has_ddmatch_postproc_plugin() const;
  void clear_ddmatch_postproc_plugin();
  static const int kDdmatchPostprocPluginFieldNumber = 12;
  const ::nlper::ReqPostprocPluginConfig& ddmatch_postproc_plugin() const;
  ::nlper::ReqPostprocPluginConfig* mutable_ddmatch_postproc_plugin();
  ::nlper::ReqPostprocPluginConfig* release_ddmatch_postproc_plugin();
  void set_allocated_ddmatch_postproc_plugin(::nlper::ReqPostprocPluginConfig* ddmatch_postproc_plugin);

  // required .nlper.ReqPreprocPluginConfig semtopic_preproc_plugin = 13;
  bool has_semtopic_preproc_plugin() const;
  void clear_semtopic_preproc_plugin();
  static const int kSemtopicPreprocPluginFieldNumber = 13;
  const ::nlper::ReqPreprocPluginConfig& semtopic_preproc_plugin() const;
  ::nlper::ReqPreprocPluginConfig* mutable_semtopic_preproc_plugin();
  ::nlper::ReqPreprocPluginConfig* release_semtopic_preproc_plugin();
  void set_allocated_semtopic_preproc_plugin(::nlper::ReqPreprocPluginConfig* semtopic_preproc_plugin);

  // required .nlper.ReqPostprocPluginConfig semtopic_postproc_plugin = 14;
  bool has_semtopic_postproc_plugin() const;
  void clear_semtopic_postproc_plugin();
  static const int kSemtopicPostprocPluginFieldNumber = 14;
  const ::nlper::ReqPostprocPluginConfig& semtopic_postproc_plugin() const;
  ::nlper::ReqPostprocPluginConfig* mutable_semtopic_postproc_plugin();
  ::nlper::ReqPostprocPluginConfig* release_semtopic_postproc_plugin();
  void set_allocated_semtopic_postproc_plugin(::nlper::ReqPostprocPluginConfig* semtopic_postproc_plugin);

  // @@protoc_insertion_point(class_scope:nlper.ServerConfig)
 private:
  inline void set_has_idle_timeout_sec();
  inline void clear_has_idle_timeout_sec();
  inline void set_has_max_concurrency();
  inline void clear_has_max_concurrency();
  inline void set_has_port();
  inline void clear_has_port();
  inline void set_has_method();
  inline void clear_has_method();
  inline void set_has_server_conf_dir();
  inline void clear_has_server_conf_dir();
  inline void set_has_log_conf_file();
  inline void clear_has_log_conf_file();
  inline void set_has_nlper_dict_conf_dir();
  inline void clear_has_nlper_dict_conf_dir();
  inline void set_has_nlper_conf_dir();
  inline void clear_has_nlper_conf_dir();
  inline void set_has_qdmatch_preproc_plugin();
  inline void clear_has_qdmatch_preproc_plugin();
  inline void set_has_qdmatch_postproc_plugin();
  inline void clear_has_qdmatch_postproc_plugin();
  inline void set_has_ddmatch_preproc_plugin();
  inline void clear_has_ddmatch_preproc_plugin();
  inline void set_has_ddmatch_postproc_plugin();
  inline void clear_has_ddmatch_postproc_plugin();
  inline void set_has_semtopic_preproc_plugin();
  inline void clear_has_semtopic_preproc_plugin();
  inline void set_has_semtopic_postproc_plugin();
  inline void clear_has_semtopic_postproc_plugin();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr port_;
  ::google::protobuf::internal::ArenaStringPtr method_;
  ::google::protobuf::internal::ArenaStringPtr server_conf_dir_;
  ::google::protobuf::internal::ArenaStringPtr log_conf_file_;
  ::google::protobuf::internal::ArenaStringPtr nlper_dict_conf_dir_;
  ::google::protobuf::internal::ArenaStringPtr nlper_conf_dir_;
  ::nlper::ReqPreprocPluginConfig* qdmatch_preproc_plugin_;
  ::nlper::ReqPostprocPluginConfig* qdmatch_postproc_plugin_;
  ::nlper::ReqPreprocPluginConfig* ddmatch_preproc_plugin_;
  ::nlper::ReqPostprocPluginConfig* ddmatch_postproc_plugin_;
  ::nlper::ReqPreprocPluginConfig* semtopic_preproc_plugin_;
  ::nlper::ReqPostprocPluginConfig* semtopic_postproc_plugin_;
  ::google::protobuf::int32 idle_timeout_sec_;
  ::google::protobuf::int32 max_concurrency_;
  friend void  protobuf_InitDefaults_nlper_2eproto_impl();
  friend void  protobuf_AddDesc_nlper_2eproto_impl();
  friend void protobuf_AssignDesc_nlper_2eproto();
  friend void protobuf_ShutdownFile_nlper_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<ServerConfig> ServerConfig_default_instance_;

// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// DictConfig

// required string name = 1;
inline bool DictConfig::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DictConfig::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DictConfig::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DictConfig::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& DictConfig::name() const {
  // @@protoc_insertion_point(field_get:nlper.DictConfig.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DictConfig::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:nlper.DictConfig.name)
}
inline void DictConfig::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nlper.DictConfig.name)
}
inline void DictConfig::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nlper.DictConfig.name)
}
inline ::std::string* DictConfig::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:nlper.DictConfig.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DictConfig::release_name() {
  // @@protoc_insertion_point(field_release:nlper.DictConfig.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DictConfig::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:nlper.DictConfig.name)
}

// required string type = 2;
inline bool DictConfig::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DictConfig::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DictConfig::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DictConfig::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_type();
}
inline const ::std::string& DictConfig::type() const {
  // @@protoc_insertion_point(field_get:nlper.DictConfig.type)
  return type_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DictConfig::set_type(const ::std::string& value) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:nlper.DictConfig.type)
}
inline void DictConfig::set_type(const char* value) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nlper.DictConfig.type)
}
inline void DictConfig::set_type(const char* value, size_t size) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nlper.DictConfig.type)
}
inline ::std::string* DictConfig::mutable_type() {
  set_has_type();
  // @@protoc_insertion_point(field_mutable:nlper.DictConfig.type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DictConfig::release_type() {
  // @@protoc_insertion_point(field_release:nlper.DictConfig.type)
  clear_has_type();
  return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DictConfig::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    set_has_type();
  } else {
    clear_has_type();
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:nlper.DictConfig.type)
}

// required string path = 3;
inline bool DictConfig::has_path() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DictConfig::set_has_path() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DictConfig::clear_has_path() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DictConfig::clear_path() {
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_path();
}
inline const ::std::string& DictConfig::path() const {
  // @@protoc_insertion_point(field_get:nlper.DictConfig.path)
  return path_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DictConfig::set_path(const ::std::string& value) {
  set_has_path();
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:nlper.DictConfig.path)
}
inline void DictConfig::set_path(const char* value) {
  set_has_path();
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nlper.DictConfig.path)
}
inline void DictConfig::set_path(const char* value, size_t size) {
  set_has_path();
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nlper.DictConfig.path)
}
inline ::std::string* DictConfig::mutable_path() {
  set_has_path();
  // @@protoc_insertion_point(field_mutable:nlper.DictConfig.path)
  return path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DictConfig::release_path() {
  // @@protoc_insertion_point(field_release:nlper.DictConfig.path)
  clear_has_path();
  return path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DictConfig::set_allocated_path(::std::string* path) {
  if (path != NULL) {
    set_has_path();
  } else {
    clear_has_path();
  }
  path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:nlper.DictConfig.path)
}

// optional string blob_name = 4;
inline bool DictConfig::has_blob_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DictConfig::set_has_blob_name() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DictConfig::clear_has_blob_name() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DictConfig::clear_blob_name() {
  blob_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_blob_name();
}
inline const ::std::string& DictConfig::blob_name() const {
  // @@protoc_insertion_point(field_get:nlper.DictConfig.blob_name)
  return blob_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DictConfig::set_blob_name(const ::std::string& value) {
  set_has_blob_name();
  blob_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:nlper.DictConfig.blob_name)
}
inline void DictConfig::set_blob_name(const char* value) {
  set_has_blob_name();
  blob_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nlper.DictConfig.blob_name)
}
inline void DictConfig::set_blob_name(const char* value, size_t size) {
  set_has_blob_name();
  blob_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nlper.DictConfig.blob_name)
}
inline ::std::string* DictConfig::mutable_blob_name() {
  set_has_blob_name();
  // @@protoc_insertion_point(field_mutable:nlper.DictConfig.blob_name)
  return blob_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DictConfig::release_blob_name() {
  // @@protoc_insertion_point(field_release:nlper.DictConfig.blob_name)
  clear_has_blob_name();
  return blob_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DictConfig::set_allocated_blob_name(::std::string* blob_name) {
  if (blob_name != NULL) {
    set_has_blob_name();
  } else {
    clear_has_blob_name();
  }
  blob_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), blob_name);
  // @@protoc_insertion_point(field_set_allocated:nlper.DictConfig.blob_name)
}

// optional bool is_reload_able = 5;
inline bool DictConfig::has_is_reload_able() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void DictConfig::set_has_is_reload_able() {
  _has_bits_[0] |= 0x00000010u;
}
inline void DictConfig::clear_has_is_reload_able() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void DictConfig::clear_is_reload_able() {
  is_reload_able_ = false;
  clear_has_is_reload_able();
}
inline bool DictConfig::is_reload_able() const {
  // @@protoc_insertion_point(field_get:nlper.DictConfig.is_reload_able)
  return is_reload_able_;
}
inline void DictConfig::set_is_reload_able(bool value) {
  set_has_is_reload_able();
  is_reload_able_ = value;
  // @@protoc_insertion_point(field_set:nlper.DictConfig.is_reload_able)
}

inline const DictConfig* DictConfig::internal_default_instance() {
  return &DictConfig_default_instance_.get();
}
// -------------------------------------------------------------------

// DictManagerConfig

// required string name = 1;
inline bool DictManagerConfig::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DictManagerConfig::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DictManagerConfig::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DictManagerConfig::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& DictManagerConfig::name() const {
  // @@protoc_insertion_point(field_get:nlper.DictManagerConfig.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DictManagerConfig::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:nlper.DictManagerConfig.name)
}
inline void DictManagerConfig::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nlper.DictManagerConfig.name)
}
inline void DictManagerConfig::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nlper.DictManagerConfig.name)
}
inline ::std::string* DictManagerConfig::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:nlper.DictManagerConfig.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DictManagerConfig::release_name() {
  // @@protoc_insertion_point(field_release:nlper.DictManagerConfig.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DictManagerConfig::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:nlper.DictManagerConfig.name)
}

// repeated .nlper.DictConfig dict_config = 2;
inline int DictManagerConfig::dict_config_size() const {
  return dict_config_.size();
}
inline void DictManagerConfig::clear_dict_config() {
  dict_config_.Clear();
}
inline const ::nlper::DictConfig& DictManagerConfig::dict_config(int index) const {
  // @@protoc_insertion_point(field_get:nlper.DictManagerConfig.dict_config)
  return dict_config_.Get(index);
}
inline ::nlper::DictConfig* DictManagerConfig::mutable_dict_config(int index) {
  // @@protoc_insertion_point(field_mutable:nlper.DictManagerConfig.dict_config)
  return dict_config_.Mutable(index);
}
inline ::nlper::DictConfig* DictManagerConfig::add_dict_config() {
  // @@protoc_insertion_point(field_add:nlper.DictManagerConfig.dict_config)
  return dict_config_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::nlper::DictConfig >*
DictManagerConfig::mutable_dict_config() {
  // @@protoc_insertion_point(field_mutable_list:nlper.DictManagerConfig.dict_config)
  return &dict_config_;
}
inline const ::google::protobuf::RepeatedPtrField< ::nlper::DictConfig >&
DictManagerConfig::dict_config() const {
  // @@protoc_insertion_point(field_list:nlper.DictManagerConfig.dict_config)
  return dict_config_;
}

inline const DictManagerConfig* DictManagerConfig::internal_default_instance() {
  return &DictManagerConfig_default_instance_.get();
}
// -------------------------------------------------------------------

// AnalysisMethodConfig

// required string name = 1;
inline bool AnalysisMethodConfig::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AnalysisMethodConfig::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AnalysisMethodConfig::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AnalysisMethodConfig::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& AnalysisMethodConfig::name() const {
  // @@protoc_insertion_point(field_get:nlper.AnalysisMethodConfig.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AnalysisMethodConfig::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:nlper.AnalysisMethodConfig.name)
}
inline void AnalysisMethodConfig::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nlper.AnalysisMethodConfig.name)
}
inline void AnalysisMethodConfig::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nlper.AnalysisMethodConfig.name)
}
inline ::std::string* AnalysisMethodConfig::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:nlper.AnalysisMethodConfig.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AnalysisMethodConfig::release_name() {
  // @@protoc_insertion_point(field_release:nlper.AnalysisMethodConfig.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AnalysisMethodConfig::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:nlper.AnalysisMethodConfig.name)
}

// required string type = 2;
inline bool AnalysisMethodConfig::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AnalysisMethodConfig::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AnalysisMethodConfig::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AnalysisMethodConfig::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_type();
}
inline const ::std::string& AnalysisMethodConfig::type() const {
  // @@protoc_insertion_point(field_get:nlper.AnalysisMethodConfig.type)
  return type_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AnalysisMethodConfig::set_type(const ::std::string& value) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:nlper.AnalysisMethodConfig.type)
}
inline void AnalysisMethodConfig::set_type(const char* value) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nlper.AnalysisMethodConfig.type)
}
inline void AnalysisMethodConfig::set_type(const char* value, size_t size) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nlper.AnalysisMethodConfig.type)
}
inline ::std::string* AnalysisMethodConfig::mutable_type() {
  set_has_type();
  // @@protoc_insertion_point(field_mutable:nlper.AnalysisMethodConfig.type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AnalysisMethodConfig::release_type() {
  // @@protoc_insertion_point(field_release:nlper.AnalysisMethodConfig.type)
  clear_has_type();
  return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AnalysisMethodConfig::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    set_has_type();
  } else {
    clear_has_type();
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:nlper.AnalysisMethodConfig.type)
}

// required uint32 level = 3;
inline bool AnalysisMethodConfig::has_level() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AnalysisMethodConfig::set_has_level() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AnalysisMethodConfig::clear_has_level() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AnalysisMethodConfig::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 AnalysisMethodConfig::level() const {
  // @@protoc_insertion_point(field_get:nlper.AnalysisMethodConfig.level)
  return level_;
}
inline void AnalysisMethodConfig::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:nlper.AnalysisMethodConfig.level)
}

// required string using_dict_name = 4;
inline bool AnalysisMethodConfig::has_using_dict_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AnalysisMethodConfig::set_has_using_dict_name() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AnalysisMethodConfig::clear_has_using_dict_name() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AnalysisMethodConfig::clear_using_dict_name() {
  using_dict_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_using_dict_name();
}
inline const ::std::string& AnalysisMethodConfig::using_dict_name() const {
  // @@protoc_insertion_point(field_get:nlper.AnalysisMethodConfig.using_dict_name)
  return using_dict_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AnalysisMethodConfig::set_using_dict_name(const ::std::string& value) {
  set_has_using_dict_name();
  using_dict_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:nlper.AnalysisMethodConfig.using_dict_name)
}
inline void AnalysisMethodConfig::set_using_dict_name(const char* value) {
  set_has_using_dict_name();
  using_dict_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nlper.AnalysisMethodConfig.using_dict_name)
}
inline void AnalysisMethodConfig::set_using_dict_name(const char* value, size_t size) {
  set_has_using_dict_name();
  using_dict_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nlper.AnalysisMethodConfig.using_dict_name)
}
inline ::std::string* AnalysisMethodConfig::mutable_using_dict_name() {
  set_has_using_dict_name();
  // @@protoc_insertion_point(field_mutable:nlper.AnalysisMethodConfig.using_dict_name)
  return using_dict_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AnalysisMethodConfig::release_using_dict_name() {
  // @@protoc_insertion_point(field_release:nlper.AnalysisMethodConfig.using_dict_name)
  clear_has_using_dict_name();
  return using_dict_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AnalysisMethodConfig::set_allocated_using_dict_name(::std::string* using_dict_name) {
  if (using_dict_name != NULL) {
    set_has_using_dict_name();
  } else {
    clear_has_using_dict_name();
  }
  using_dict_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), using_dict_name);
  // @@protoc_insertion_point(field_set_allocated:nlper.AnalysisMethodConfig.using_dict_name)
}

// optional bool need_phrase_seg = 5;
inline bool AnalysisMethodConfig::has_need_phrase_seg() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void AnalysisMethodConfig::set_has_need_phrase_seg() {
  _has_bits_[0] |= 0x00000010u;
}
inline void AnalysisMethodConfig::clear_has_need_phrase_seg() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void AnalysisMethodConfig::clear_need_phrase_seg() {
  need_phrase_seg_ = false;
  clear_has_need_phrase_seg();
}
inline bool AnalysisMethodConfig::need_phrase_seg() const {
  // @@protoc_insertion_point(field_get:nlper.AnalysisMethodConfig.need_phrase_seg)
  return need_phrase_seg_;
}
inline void AnalysisMethodConfig::set_need_phrase_seg(bool value) {
  set_has_need_phrase_seg();
  need_phrase_seg_ = value;
  // @@protoc_insertion_point(field_set:nlper.AnalysisMethodConfig.need_phrase_seg)
}

// optional uint32 thread_num = 6;
inline bool AnalysisMethodConfig::has_thread_num() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void AnalysisMethodConfig::set_has_thread_num() {
  _has_bits_[0] |= 0x00000020u;
}
inline void AnalysisMethodConfig::clear_has_thread_num() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void AnalysisMethodConfig::clear_thread_num() {
  thread_num_ = 0u;
  clear_has_thread_num();
}
inline ::google::protobuf::uint32 AnalysisMethodConfig::thread_num() const {
  // @@protoc_insertion_point(field_get:nlper.AnalysisMethodConfig.thread_num)
  return thread_num_;
}
inline void AnalysisMethodConfig::set_thread_num(::google::protobuf::uint32 value) {
  set_has_thread_num();
  thread_num_ = value;
  // @@protoc_insertion_point(field_set:nlper.AnalysisMethodConfig.thread_num)
}

inline const AnalysisMethodConfig* AnalysisMethodConfig::internal_default_instance() {
  return &AnalysisMethodConfig_default_instance_.get();
}
// -------------------------------------------------------------------

// AnalysisConfig

// optional string name = 1;
inline bool AnalysisConfig::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AnalysisConfig::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AnalysisConfig::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AnalysisConfig::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& AnalysisConfig::name() const {
  // @@protoc_insertion_point(field_get:nlper.AnalysisConfig.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AnalysisConfig::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:nlper.AnalysisConfig.name)
}
inline void AnalysisConfig::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nlper.AnalysisConfig.name)
}
inline void AnalysisConfig::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nlper.AnalysisConfig.name)
}
inline ::std::string* AnalysisConfig::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:nlper.AnalysisConfig.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AnalysisConfig::release_name() {
  // @@protoc_insertion_point(field_release:nlper.AnalysisConfig.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AnalysisConfig::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:nlper.AnalysisConfig.name)
}

// optional string hide_tag = 2;
inline bool AnalysisConfig::has_hide_tag() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AnalysisConfig::set_has_hide_tag() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AnalysisConfig::clear_has_hide_tag() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AnalysisConfig::clear_hide_tag() {
  hide_tag_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_hide_tag();
}
inline const ::std::string& AnalysisConfig::hide_tag() const {
  // @@protoc_insertion_point(field_get:nlper.AnalysisConfig.hide_tag)
  return hide_tag_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AnalysisConfig::set_hide_tag(const ::std::string& value) {
  set_has_hide_tag();
  hide_tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:nlper.AnalysisConfig.hide_tag)
}
inline void AnalysisConfig::set_hide_tag(const char* value) {
  set_has_hide_tag();
  hide_tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nlper.AnalysisConfig.hide_tag)
}
inline void AnalysisConfig::set_hide_tag(const char* value, size_t size) {
  set_has_hide_tag();
  hide_tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nlper.AnalysisConfig.hide_tag)
}
inline ::std::string* AnalysisConfig::mutable_hide_tag() {
  set_has_hide_tag();
  // @@protoc_insertion_point(field_mutable:nlper.AnalysisConfig.hide_tag)
  return hide_tag_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AnalysisConfig::release_hide_tag() {
  // @@protoc_insertion_point(field_release:nlper.AnalysisConfig.hide_tag)
  clear_has_hide_tag();
  return hide_tag_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AnalysisConfig::set_allocated_hide_tag(::std::string* hide_tag) {
  if (hide_tag != NULL) {
    set_has_hide_tag();
  } else {
    clear_has_hide_tag();
  }
  hide_tag_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hide_tag);
  // @@protoc_insertion_point(field_set_allocated:nlper.AnalysisConfig.hide_tag)
}

// repeated .nlper.AnalysisMethodConfig analysis_method = 3;
inline int AnalysisConfig::analysis_method_size() const {
  return analysis_method_.size();
}
inline void AnalysisConfig::clear_analysis_method() {
  analysis_method_.Clear();
}
inline const ::nlper::AnalysisMethodConfig& AnalysisConfig::analysis_method(int index) const {
  // @@protoc_insertion_point(field_get:nlper.AnalysisConfig.analysis_method)
  return analysis_method_.Get(index);
}
inline ::nlper::AnalysisMethodConfig* AnalysisConfig::mutable_analysis_method(int index) {
  // @@protoc_insertion_point(field_mutable:nlper.AnalysisConfig.analysis_method)
  return analysis_method_.Mutable(index);
}
inline ::nlper::AnalysisMethodConfig* AnalysisConfig::add_analysis_method() {
  // @@protoc_insertion_point(field_add:nlper.AnalysisConfig.analysis_method)
  return analysis_method_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::nlper::AnalysisMethodConfig >*
AnalysisConfig::mutable_analysis_method() {
  // @@protoc_insertion_point(field_mutable_list:nlper.AnalysisConfig.analysis_method)
  return &analysis_method_;
}
inline const ::google::protobuf::RepeatedPtrField< ::nlper::AnalysisMethodConfig >&
AnalysisConfig::analysis_method() const {
  // @@protoc_insertion_point(field_list:nlper.AnalysisConfig.analysis_method)
  return analysis_method_;
}

inline const AnalysisConfig* AnalysisConfig::internal_default_instance() {
  return &AnalysisConfig_default_instance_.get();
}
// -------------------------------------------------------------------

// PatternConfig

// required string pat_fname = 1;
inline bool PatternConfig::has_pat_fname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PatternConfig::set_has_pat_fname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PatternConfig::clear_has_pat_fname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PatternConfig::clear_pat_fname() {
  pat_fname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_pat_fname();
}
inline const ::std::string& PatternConfig::pat_fname() const {
  // @@protoc_insertion_point(field_get:nlper.PatternConfig.pat_fname)
  return pat_fname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PatternConfig::set_pat_fname(const ::std::string& value) {
  set_has_pat_fname();
  pat_fname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:nlper.PatternConfig.pat_fname)
}
inline void PatternConfig::set_pat_fname(const char* value) {
  set_has_pat_fname();
  pat_fname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nlper.PatternConfig.pat_fname)
}
inline void PatternConfig::set_pat_fname(const char* value, size_t size) {
  set_has_pat_fname();
  pat_fname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nlper.PatternConfig.pat_fname)
}
inline ::std::string* PatternConfig::mutable_pat_fname() {
  set_has_pat_fname();
  // @@protoc_insertion_point(field_mutable:nlper.PatternConfig.pat_fname)
  return pat_fname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PatternConfig::release_pat_fname() {
  // @@protoc_insertion_point(field_release:nlper.PatternConfig.pat_fname)
  clear_has_pat_fname();
  return pat_fname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PatternConfig::set_allocated_pat_fname(::std::string* pat_fname) {
  if (pat_fname != NULL) {
    set_has_pat_fname();
  } else {
    clear_has_pat_fname();
  }
  pat_fname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pat_fname);
  // @@protoc_insertion_point(field_set_allocated:nlper.PatternConfig.pat_fname)
}

// required string dict_fname = 2;
inline bool PatternConfig::has_dict_fname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PatternConfig::set_has_dict_fname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PatternConfig::clear_has_dict_fname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PatternConfig::clear_dict_fname() {
  dict_fname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_dict_fname();
}
inline const ::std::string& PatternConfig::dict_fname() const {
  // @@protoc_insertion_point(field_get:nlper.PatternConfig.dict_fname)
  return dict_fname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PatternConfig::set_dict_fname(const ::std::string& value) {
  set_has_dict_fname();
  dict_fname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:nlper.PatternConfig.dict_fname)
}
inline void PatternConfig::set_dict_fname(const char* value) {
  set_has_dict_fname();
  dict_fname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nlper.PatternConfig.dict_fname)
}
inline void PatternConfig::set_dict_fname(const char* value, size_t size) {
  set_has_dict_fname();
  dict_fname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nlper.PatternConfig.dict_fname)
}
inline ::std::string* PatternConfig::mutable_dict_fname() {
  set_has_dict_fname();
  // @@protoc_insertion_point(field_mutable:nlper.PatternConfig.dict_fname)
  return dict_fname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PatternConfig::release_dict_fname() {
  // @@protoc_insertion_point(field_release:nlper.PatternConfig.dict_fname)
  clear_has_dict_fname();
  return dict_fname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PatternConfig::set_allocated_dict_fname(::std::string* dict_fname) {
  if (dict_fname != NULL) {
    set_has_dict_fname();
  } else {
    clear_has_dict_fname();
  }
  dict_fname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dict_fname);
  // @@protoc_insertion_point(field_set_allocated:nlper.PatternConfig.dict_fname)
}

// required string igno_fname = 3;
inline bool PatternConfig::has_igno_fname() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PatternConfig::set_has_igno_fname() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PatternConfig::clear_has_igno_fname() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PatternConfig::clear_igno_fname() {
  igno_fname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_igno_fname();
}
inline const ::std::string& PatternConfig::igno_fname() const {
  // @@protoc_insertion_point(field_get:nlper.PatternConfig.igno_fname)
  return igno_fname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PatternConfig::set_igno_fname(const ::std::string& value) {
  set_has_igno_fname();
  igno_fname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:nlper.PatternConfig.igno_fname)
}
inline void PatternConfig::set_igno_fname(const char* value) {
  set_has_igno_fname();
  igno_fname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nlper.PatternConfig.igno_fname)
}
inline void PatternConfig::set_igno_fname(const char* value, size_t size) {
  set_has_igno_fname();
  igno_fname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nlper.PatternConfig.igno_fname)
}
inline ::std::string* PatternConfig::mutable_igno_fname() {
  set_has_igno_fname();
  // @@protoc_insertion_point(field_mutable:nlper.PatternConfig.igno_fname)
  return igno_fname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PatternConfig::release_igno_fname() {
  // @@protoc_insertion_point(field_release:nlper.PatternConfig.igno_fname)
  clear_has_igno_fname();
  return igno_fname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PatternConfig::set_allocated_igno_fname(::std::string* igno_fname) {
  if (igno_fname != NULL) {
    set_has_igno_fname();
  } else {
    clear_has_igno_fname();
  }
  igno_fname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), igno_fname);
  // @@protoc_insertion_point(field_set_allocated:nlper.PatternConfig.igno_fname)
}

inline const PatternConfig* PatternConfig::internal_default_instance() {
  return &PatternConfig_default_instance_.get();
}
// -------------------------------------------------------------------

// MatchingConfig

// required string name = 1;
inline bool MatchingConfig::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MatchingConfig::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MatchingConfig::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MatchingConfig::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& MatchingConfig::name() const {
  // @@protoc_insertion_point(field_get:nlper.MatchingConfig.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MatchingConfig::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:nlper.MatchingConfig.name)
}
inline void MatchingConfig::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nlper.MatchingConfig.name)
}
inline void MatchingConfig::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nlper.MatchingConfig.name)
}
inline ::std::string* MatchingConfig::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:nlper.MatchingConfig.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MatchingConfig::release_name() {
  // @@protoc_insertion_point(field_release:nlper.MatchingConfig.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MatchingConfig::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:nlper.MatchingConfig.name)
}

// required string type = 2;
inline bool MatchingConfig::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MatchingConfig::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MatchingConfig::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MatchingConfig::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_type();
}
inline const ::std::string& MatchingConfig::type() const {
  // @@protoc_insertion_point(field_get:nlper.MatchingConfig.type)
  return type_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MatchingConfig::set_type(const ::std::string& value) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:nlper.MatchingConfig.type)
}
inline void MatchingConfig::set_type(const char* value) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nlper.MatchingConfig.type)
}
inline void MatchingConfig::set_type(const char* value, size_t size) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nlper.MatchingConfig.type)
}
inline ::std::string* MatchingConfig::mutable_type() {
  set_has_type();
  // @@protoc_insertion_point(field_mutable:nlper.MatchingConfig.type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MatchingConfig::release_type() {
  // @@protoc_insertion_point(field_release:nlper.MatchingConfig.type)
  clear_has_type();
  return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MatchingConfig::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    set_has_type();
  } else {
    clear_has_type();
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:nlper.MatchingConfig.type)
}

// optional string using_dict_name = 3;
inline bool MatchingConfig::has_using_dict_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MatchingConfig::set_has_using_dict_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MatchingConfig::clear_has_using_dict_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MatchingConfig::clear_using_dict_name() {
  using_dict_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_using_dict_name();
}
inline const ::std::string& MatchingConfig::using_dict_name() const {
  // @@protoc_insertion_point(field_get:nlper.MatchingConfig.using_dict_name)
  return using_dict_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MatchingConfig::set_using_dict_name(const ::std::string& value) {
  set_has_using_dict_name();
  using_dict_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:nlper.MatchingConfig.using_dict_name)
}
inline void MatchingConfig::set_using_dict_name(const char* value) {
  set_has_using_dict_name();
  using_dict_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nlper.MatchingConfig.using_dict_name)
}
inline void MatchingConfig::set_using_dict_name(const char* value, size_t size) {
  set_has_using_dict_name();
  using_dict_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nlper.MatchingConfig.using_dict_name)
}
inline ::std::string* MatchingConfig::mutable_using_dict_name() {
  set_has_using_dict_name();
  // @@protoc_insertion_point(field_mutable:nlper.MatchingConfig.using_dict_name)
  return using_dict_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MatchingConfig::release_using_dict_name() {
  // @@protoc_insertion_point(field_release:nlper.MatchingConfig.using_dict_name)
  clear_has_using_dict_name();
  return using_dict_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MatchingConfig::set_allocated_using_dict_name(::std::string* using_dict_name) {
  if (using_dict_name != NULL) {
    set_has_using_dict_name();
  } else {
    clear_has_using_dict_name();
  }
  using_dict_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), using_dict_name);
  // @@protoc_insertion_point(field_set_allocated:nlper.MatchingConfig.using_dict_name)
}

// required int32 output_num = 4;
inline bool MatchingConfig::has_output_num() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MatchingConfig::set_has_output_num() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MatchingConfig::clear_has_output_num() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MatchingConfig::clear_output_num() {
  output_num_ = 0;
  clear_has_output_num();
}
inline ::google::protobuf::int32 MatchingConfig::output_num() const {
  // @@protoc_insertion_point(field_get:nlper.MatchingConfig.output_num)
  return output_num_;
}
inline void MatchingConfig::set_output_num(::google::protobuf::int32 value) {
  set_has_output_num();
  output_num_ = value;
  // @@protoc_insertion_point(field_set:nlper.MatchingConfig.output_num)
}

// required float feature_weight = 5;
inline bool MatchingConfig::has_feature_weight() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MatchingConfig::set_has_feature_weight() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MatchingConfig::clear_has_feature_weight() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MatchingConfig::clear_feature_weight() {
  feature_weight_ = 0;
  clear_has_feature_weight();
}
inline float MatchingConfig::feature_weight() const {
  // @@protoc_insertion_point(field_get:nlper.MatchingConfig.feature_weight)
  return feature_weight_;
}
inline void MatchingConfig::set_feature_weight(float value) {
  set_has_feature_weight();
  feature_weight_ = value;
  // @@protoc_insertion_point(field_set:nlper.MatchingConfig.feature_weight)
}

// optional .nlper.PatternConfig pattern = 6;
inline bool MatchingConfig::has_pattern() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void MatchingConfig::set_has_pattern() {
  _has_bits_[0] |= 0x00000020u;
}
inline void MatchingConfig::clear_has_pattern() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void MatchingConfig::clear_pattern() {
  if (pattern_ != NULL) pattern_->::nlper::PatternConfig::Clear();
  clear_has_pattern();
}
inline const ::nlper::PatternConfig& MatchingConfig::pattern() const {
  // @@protoc_insertion_point(field_get:nlper.MatchingConfig.pattern)
  return pattern_ != NULL ? *pattern_
                         : *::nlper::PatternConfig::internal_default_instance();
}
inline ::nlper::PatternConfig* MatchingConfig::mutable_pattern() {
  set_has_pattern();
  if (pattern_ == NULL) {
    pattern_ = new ::nlper::PatternConfig;
  }
  // @@protoc_insertion_point(field_mutable:nlper.MatchingConfig.pattern)
  return pattern_;
}
inline ::nlper::PatternConfig* MatchingConfig::release_pattern() {
  // @@protoc_insertion_point(field_release:nlper.MatchingConfig.pattern)
  clear_has_pattern();
  ::nlper::PatternConfig* temp = pattern_;
  pattern_ = NULL;
  return temp;
}
inline void MatchingConfig::set_allocated_pattern(::nlper::PatternConfig* pattern) {
  delete pattern_;
  pattern_ = pattern;
  if (pattern) {
    set_has_pattern();
  } else {
    clear_has_pattern();
  }
  // @@protoc_insertion_point(field_set_allocated:nlper.MatchingConfig.pattern)
}

inline const MatchingConfig* MatchingConfig::internal_default_instance() {
  return &MatchingConfig_default_instance_.get();
}
// -------------------------------------------------------------------

// MatchConfig

// optional string name = 1;
inline bool MatchConfig::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MatchConfig::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MatchConfig::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MatchConfig::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& MatchConfig::name() const {
  // @@protoc_insertion_point(field_get:nlper.MatchConfig.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MatchConfig::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:nlper.MatchConfig.name)
}
inline void MatchConfig::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nlper.MatchConfig.name)
}
inline void MatchConfig::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nlper.MatchConfig.name)
}
inline ::std::string* MatchConfig::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:nlper.MatchConfig.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MatchConfig::release_name() {
  // @@protoc_insertion_point(field_release:nlper.MatchConfig.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MatchConfig::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:nlper.MatchConfig.name)
}

// repeated .nlper.MatchingConfig matching_config = 2;
inline int MatchConfig::matching_config_size() const {
  return matching_config_.size();
}
inline void MatchConfig::clear_matching_config() {
  matching_config_.Clear();
}
inline const ::nlper::MatchingConfig& MatchConfig::matching_config(int index) const {
  // @@protoc_insertion_point(field_get:nlper.MatchConfig.matching_config)
  return matching_config_.Get(index);
}
inline ::nlper::MatchingConfig* MatchConfig::mutable_matching_config(int index) {
  // @@protoc_insertion_point(field_mutable:nlper.MatchConfig.matching_config)
  return matching_config_.Mutable(index);
}
inline ::nlper::MatchingConfig* MatchConfig::add_matching_config() {
  // @@protoc_insertion_point(field_add:nlper.MatchConfig.matching_config)
  return matching_config_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::nlper::MatchingConfig >*
MatchConfig::mutable_matching_config() {
  // @@protoc_insertion_point(field_mutable_list:nlper.MatchConfig.matching_config)
  return &matching_config_;
}
inline const ::google::protobuf::RepeatedPtrField< ::nlper::MatchingConfig >&
MatchConfig::matching_config() const {
  // @@protoc_insertion_point(field_list:nlper.MatchConfig.matching_config)
  return matching_config_;
}

inline const MatchConfig* MatchConfig::internal_default_instance() {
  return &MatchConfig_default_instance_.get();
}
// -------------------------------------------------------------------

// NlperStrategyConfig

// optional string analysis_config = 1;
inline bool NlperStrategyConfig::has_analysis_config() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NlperStrategyConfig::set_has_analysis_config() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NlperStrategyConfig::clear_has_analysis_config() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NlperStrategyConfig::clear_analysis_config() {
  analysis_config_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_analysis_config();
}
inline const ::std::string& NlperStrategyConfig::analysis_config() const {
  // @@protoc_insertion_point(field_get:nlper.NlperStrategyConfig.analysis_config)
  return analysis_config_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NlperStrategyConfig::set_analysis_config(const ::std::string& value) {
  set_has_analysis_config();
  analysis_config_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:nlper.NlperStrategyConfig.analysis_config)
}
inline void NlperStrategyConfig::set_analysis_config(const char* value) {
  set_has_analysis_config();
  analysis_config_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nlper.NlperStrategyConfig.analysis_config)
}
inline void NlperStrategyConfig::set_analysis_config(const char* value, size_t size) {
  set_has_analysis_config();
  analysis_config_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nlper.NlperStrategyConfig.analysis_config)
}
inline ::std::string* NlperStrategyConfig::mutable_analysis_config() {
  set_has_analysis_config();
  // @@protoc_insertion_point(field_mutable:nlper.NlperStrategyConfig.analysis_config)
  return analysis_config_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NlperStrategyConfig::release_analysis_config() {
  // @@protoc_insertion_point(field_release:nlper.NlperStrategyConfig.analysis_config)
  clear_has_analysis_config();
  return analysis_config_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NlperStrategyConfig::set_allocated_analysis_config(::std::string* analysis_config) {
  if (analysis_config != NULL) {
    set_has_analysis_config();
  } else {
    clear_has_analysis_config();
  }
  analysis_config_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), analysis_config);
  // @@protoc_insertion_point(field_set_allocated:nlper.NlperStrategyConfig.analysis_config)
}

// optional string match_config = 2;
inline bool NlperStrategyConfig::has_match_config() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NlperStrategyConfig::set_has_match_config() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NlperStrategyConfig::clear_has_match_config() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NlperStrategyConfig::clear_match_config() {
  match_config_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_match_config();
}
inline const ::std::string& NlperStrategyConfig::match_config() const {
  // @@protoc_insertion_point(field_get:nlper.NlperStrategyConfig.match_config)
  return match_config_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NlperStrategyConfig::set_match_config(const ::std::string& value) {
  set_has_match_config();
  match_config_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:nlper.NlperStrategyConfig.match_config)
}
inline void NlperStrategyConfig::set_match_config(const char* value) {
  set_has_match_config();
  match_config_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nlper.NlperStrategyConfig.match_config)
}
inline void NlperStrategyConfig::set_match_config(const char* value, size_t size) {
  set_has_match_config();
  match_config_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nlper.NlperStrategyConfig.match_config)
}
inline ::std::string* NlperStrategyConfig::mutable_match_config() {
  set_has_match_config();
  // @@protoc_insertion_point(field_mutable:nlper.NlperStrategyConfig.match_config)
  return match_config_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NlperStrategyConfig::release_match_config() {
  // @@protoc_insertion_point(field_release:nlper.NlperStrategyConfig.match_config)
  clear_has_match_config();
  return match_config_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NlperStrategyConfig::set_allocated_match_config(::std::string* match_config) {
  if (match_config != NULL) {
    set_has_match_config();
  } else {
    clear_has_match_config();
  }
  match_config_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), match_config);
  // @@protoc_insertion_point(field_set_allocated:nlper.NlperStrategyConfig.match_config)
}

inline const NlperStrategyConfig* NlperStrategyConfig::internal_default_instance() {
  return &NlperStrategyConfig_default_instance_.get();
}
// -------------------------------------------------------------------

// ReqPreprocPluginConfig

// required string type = 1;
inline bool ReqPreprocPluginConfig::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReqPreprocPluginConfig::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReqPreprocPluginConfig::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReqPreprocPluginConfig::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_type();
}
inline const ::std::string& ReqPreprocPluginConfig::type() const {
  // @@protoc_insertion_point(field_get:nlper.ReqPreprocPluginConfig.type)
  return type_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReqPreprocPluginConfig::set_type(const ::std::string& value) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:nlper.ReqPreprocPluginConfig.type)
}
inline void ReqPreprocPluginConfig::set_type(const char* value) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nlper.ReqPreprocPluginConfig.type)
}
inline void ReqPreprocPluginConfig::set_type(const char* value, size_t size) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nlper.ReqPreprocPluginConfig.type)
}
inline ::std::string* ReqPreprocPluginConfig::mutable_type() {
  set_has_type();
  // @@protoc_insertion_point(field_mutable:nlper.ReqPreprocPluginConfig.type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReqPreprocPluginConfig::release_type() {
  // @@protoc_insertion_point(field_release:nlper.ReqPreprocPluginConfig.type)
  clear_has_type();
  return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReqPreprocPluginConfig::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    set_has_type();
  } else {
    clear_has_type();
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:nlper.ReqPreprocPluginConfig.type)
}

// required string name = 2;
inline bool ReqPreprocPluginConfig::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReqPreprocPluginConfig::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReqPreprocPluginConfig::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReqPreprocPluginConfig::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& ReqPreprocPluginConfig::name() const {
  // @@protoc_insertion_point(field_get:nlper.ReqPreprocPluginConfig.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReqPreprocPluginConfig::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:nlper.ReqPreprocPluginConfig.name)
}
inline void ReqPreprocPluginConfig::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nlper.ReqPreprocPluginConfig.name)
}
inline void ReqPreprocPluginConfig::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nlper.ReqPreprocPluginConfig.name)
}
inline ::std::string* ReqPreprocPluginConfig::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:nlper.ReqPreprocPluginConfig.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReqPreprocPluginConfig::release_name() {
  // @@protoc_insertion_point(field_release:nlper.ReqPreprocPluginConfig.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReqPreprocPluginConfig::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:nlper.ReqPreprocPluginConfig.name)
}

inline const ReqPreprocPluginConfig* ReqPreprocPluginConfig::internal_default_instance() {
  return &ReqPreprocPluginConfig_default_instance_.get();
}
// -------------------------------------------------------------------

// ReqPostprocPluginConfig

// required string type = 1;
inline bool ReqPostprocPluginConfig::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReqPostprocPluginConfig::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReqPostprocPluginConfig::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReqPostprocPluginConfig::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_type();
}
inline const ::std::string& ReqPostprocPluginConfig::type() const {
  // @@protoc_insertion_point(field_get:nlper.ReqPostprocPluginConfig.type)
  return type_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReqPostprocPluginConfig::set_type(const ::std::string& value) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:nlper.ReqPostprocPluginConfig.type)
}
inline void ReqPostprocPluginConfig::set_type(const char* value) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nlper.ReqPostprocPluginConfig.type)
}
inline void ReqPostprocPluginConfig::set_type(const char* value, size_t size) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nlper.ReqPostprocPluginConfig.type)
}
inline ::std::string* ReqPostprocPluginConfig::mutable_type() {
  set_has_type();
  // @@protoc_insertion_point(field_mutable:nlper.ReqPostprocPluginConfig.type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReqPostprocPluginConfig::release_type() {
  // @@protoc_insertion_point(field_release:nlper.ReqPostprocPluginConfig.type)
  clear_has_type();
  return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReqPostprocPluginConfig::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    set_has_type();
  } else {
    clear_has_type();
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:nlper.ReqPostprocPluginConfig.type)
}

// required string name = 2;
inline bool ReqPostprocPluginConfig::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReqPostprocPluginConfig::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReqPostprocPluginConfig::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReqPostprocPluginConfig::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& ReqPostprocPluginConfig::name() const {
  // @@protoc_insertion_point(field_get:nlper.ReqPostprocPluginConfig.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReqPostprocPluginConfig::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:nlper.ReqPostprocPluginConfig.name)
}
inline void ReqPostprocPluginConfig::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nlper.ReqPostprocPluginConfig.name)
}
inline void ReqPostprocPluginConfig::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nlper.ReqPostprocPluginConfig.name)
}
inline ::std::string* ReqPostprocPluginConfig::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:nlper.ReqPostprocPluginConfig.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReqPostprocPluginConfig::release_name() {
  // @@protoc_insertion_point(field_release:nlper.ReqPostprocPluginConfig.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReqPostprocPluginConfig::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:nlper.ReqPostprocPluginConfig.name)
}

inline const ReqPostprocPluginConfig* ReqPostprocPluginConfig::internal_default_instance() {
  return &ReqPostprocPluginConfig_default_instance_.get();
}
// -------------------------------------------------------------------

// ServerConfig

// required int32 idle_timeout_sec = 1;
inline bool ServerConfig::has_idle_timeout_sec() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ServerConfig::set_has_idle_timeout_sec() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ServerConfig::clear_has_idle_timeout_sec() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ServerConfig::clear_idle_timeout_sec() {
  idle_timeout_sec_ = 0;
  clear_has_idle_timeout_sec();
}
inline ::google::protobuf::int32 ServerConfig::idle_timeout_sec() const {
  // @@protoc_insertion_point(field_get:nlper.ServerConfig.idle_timeout_sec)
  return idle_timeout_sec_;
}
inline void ServerConfig::set_idle_timeout_sec(::google::protobuf::int32 value) {
  set_has_idle_timeout_sec();
  idle_timeout_sec_ = value;
  // @@protoc_insertion_point(field_set:nlper.ServerConfig.idle_timeout_sec)
}

// required int32 max_concurrency = 2;
inline bool ServerConfig::has_max_concurrency() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ServerConfig::set_has_max_concurrency() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ServerConfig::clear_has_max_concurrency() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ServerConfig::clear_max_concurrency() {
  max_concurrency_ = 0;
  clear_has_max_concurrency();
}
inline ::google::protobuf::int32 ServerConfig::max_concurrency() const {
  // @@protoc_insertion_point(field_get:nlper.ServerConfig.max_concurrency)
  return max_concurrency_;
}
inline void ServerConfig::set_max_concurrency(::google::protobuf::int32 value) {
  set_has_max_concurrency();
  max_concurrency_ = value;
  // @@protoc_insertion_point(field_set:nlper.ServerConfig.max_concurrency)
}

// required string port = 3;
inline bool ServerConfig::has_port() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ServerConfig::set_has_port() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ServerConfig::clear_has_port() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ServerConfig::clear_port() {
  port_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_port();
}
inline const ::std::string& ServerConfig::port() const {
  // @@protoc_insertion_point(field_get:nlper.ServerConfig.port)
  return port_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ServerConfig::set_port(const ::std::string& value) {
  set_has_port();
  port_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:nlper.ServerConfig.port)
}
inline void ServerConfig::set_port(const char* value) {
  set_has_port();
  port_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nlper.ServerConfig.port)
}
inline void ServerConfig::set_port(const char* value, size_t size) {
  set_has_port();
  port_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nlper.ServerConfig.port)
}
inline ::std::string* ServerConfig::mutable_port() {
  set_has_port();
  // @@protoc_insertion_point(field_mutable:nlper.ServerConfig.port)
  return port_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ServerConfig::release_port() {
  // @@protoc_insertion_point(field_release:nlper.ServerConfig.port)
  clear_has_port();
  return port_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ServerConfig::set_allocated_port(::std::string* port) {
  if (port != NULL) {
    set_has_port();
  } else {
    clear_has_port();
  }
  port_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), port);
  // @@protoc_insertion_point(field_set_allocated:nlper.ServerConfig.port)
}

// required string method = 4;
inline bool ServerConfig::has_method() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ServerConfig::set_has_method() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ServerConfig::clear_has_method() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ServerConfig::clear_method() {
  method_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_method();
}
inline const ::std::string& ServerConfig::method() const {
  // @@protoc_insertion_point(field_get:nlper.ServerConfig.method)
  return method_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ServerConfig::set_method(const ::std::string& value) {
  set_has_method();
  method_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:nlper.ServerConfig.method)
}
inline void ServerConfig::set_method(const char* value) {
  set_has_method();
  method_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nlper.ServerConfig.method)
}
inline void ServerConfig::set_method(const char* value, size_t size) {
  set_has_method();
  method_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nlper.ServerConfig.method)
}
inline ::std::string* ServerConfig::mutable_method() {
  set_has_method();
  // @@protoc_insertion_point(field_mutable:nlper.ServerConfig.method)
  return method_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ServerConfig::release_method() {
  // @@protoc_insertion_point(field_release:nlper.ServerConfig.method)
  clear_has_method();
  return method_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ServerConfig::set_allocated_method(::std::string* method) {
  if (method != NULL) {
    set_has_method();
  } else {
    clear_has_method();
  }
  method_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), method);
  // @@protoc_insertion_point(field_set_allocated:nlper.ServerConfig.method)
}

// required string server_conf_dir = 5;
inline bool ServerConfig::has_server_conf_dir() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ServerConfig::set_has_server_conf_dir() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ServerConfig::clear_has_server_conf_dir() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ServerConfig::clear_server_conf_dir() {
  server_conf_dir_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_server_conf_dir();
}
inline const ::std::string& ServerConfig::server_conf_dir() const {
  // @@protoc_insertion_point(field_get:nlper.ServerConfig.server_conf_dir)
  return server_conf_dir_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ServerConfig::set_server_conf_dir(const ::std::string& value) {
  set_has_server_conf_dir();
  server_conf_dir_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:nlper.ServerConfig.server_conf_dir)
}
inline void ServerConfig::set_server_conf_dir(const char* value) {
  set_has_server_conf_dir();
  server_conf_dir_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nlper.ServerConfig.server_conf_dir)
}
inline void ServerConfig::set_server_conf_dir(const char* value, size_t size) {
  set_has_server_conf_dir();
  server_conf_dir_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nlper.ServerConfig.server_conf_dir)
}
inline ::std::string* ServerConfig::mutable_server_conf_dir() {
  set_has_server_conf_dir();
  // @@protoc_insertion_point(field_mutable:nlper.ServerConfig.server_conf_dir)
  return server_conf_dir_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ServerConfig::release_server_conf_dir() {
  // @@protoc_insertion_point(field_release:nlper.ServerConfig.server_conf_dir)
  clear_has_server_conf_dir();
  return server_conf_dir_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ServerConfig::set_allocated_server_conf_dir(::std::string* server_conf_dir) {
  if (server_conf_dir != NULL) {
    set_has_server_conf_dir();
  } else {
    clear_has_server_conf_dir();
  }
  server_conf_dir_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), server_conf_dir);
  // @@protoc_insertion_point(field_set_allocated:nlper.ServerConfig.server_conf_dir)
}

// required string log_conf_file = 6;
inline bool ServerConfig::has_log_conf_file() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ServerConfig::set_has_log_conf_file() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ServerConfig::clear_has_log_conf_file() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ServerConfig::clear_log_conf_file() {
  log_conf_file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_log_conf_file();
}
inline const ::std::string& ServerConfig::log_conf_file() const {
  // @@protoc_insertion_point(field_get:nlper.ServerConfig.log_conf_file)
  return log_conf_file_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ServerConfig::set_log_conf_file(const ::std::string& value) {
  set_has_log_conf_file();
  log_conf_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:nlper.ServerConfig.log_conf_file)
}
inline void ServerConfig::set_log_conf_file(const char* value) {
  set_has_log_conf_file();
  log_conf_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nlper.ServerConfig.log_conf_file)
}
inline void ServerConfig::set_log_conf_file(const char* value, size_t size) {
  set_has_log_conf_file();
  log_conf_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nlper.ServerConfig.log_conf_file)
}
inline ::std::string* ServerConfig::mutable_log_conf_file() {
  set_has_log_conf_file();
  // @@protoc_insertion_point(field_mutable:nlper.ServerConfig.log_conf_file)
  return log_conf_file_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ServerConfig::release_log_conf_file() {
  // @@protoc_insertion_point(field_release:nlper.ServerConfig.log_conf_file)
  clear_has_log_conf_file();
  return log_conf_file_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ServerConfig::set_allocated_log_conf_file(::std::string* log_conf_file) {
  if (log_conf_file != NULL) {
    set_has_log_conf_file();
  } else {
    clear_has_log_conf_file();
  }
  log_conf_file_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), log_conf_file);
  // @@protoc_insertion_point(field_set_allocated:nlper.ServerConfig.log_conf_file)
}

// required string nlper_dict_conf_dir = 7;
inline bool ServerConfig::has_nlper_dict_conf_dir() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ServerConfig::set_has_nlper_dict_conf_dir() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ServerConfig::clear_has_nlper_dict_conf_dir() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ServerConfig::clear_nlper_dict_conf_dir() {
  nlper_dict_conf_dir_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_nlper_dict_conf_dir();
}
inline const ::std::string& ServerConfig::nlper_dict_conf_dir() const {
  // @@protoc_insertion_point(field_get:nlper.ServerConfig.nlper_dict_conf_dir)
  return nlper_dict_conf_dir_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ServerConfig::set_nlper_dict_conf_dir(const ::std::string& value) {
  set_has_nlper_dict_conf_dir();
  nlper_dict_conf_dir_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:nlper.ServerConfig.nlper_dict_conf_dir)
}
inline void ServerConfig::set_nlper_dict_conf_dir(const char* value) {
  set_has_nlper_dict_conf_dir();
  nlper_dict_conf_dir_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nlper.ServerConfig.nlper_dict_conf_dir)
}
inline void ServerConfig::set_nlper_dict_conf_dir(const char* value, size_t size) {
  set_has_nlper_dict_conf_dir();
  nlper_dict_conf_dir_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nlper.ServerConfig.nlper_dict_conf_dir)
}
inline ::std::string* ServerConfig::mutable_nlper_dict_conf_dir() {
  set_has_nlper_dict_conf_dir();
  // @@protoc_insertion_point(field_mutable:nlper.ServerConfig.nlper_dict_conf_dir)
  return nlper_dict_conf_dir_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ServerConfig::release_nlper_dict_conf_dir() {
  // @@protoc_insertion_point(field_release:nlper.ServerConfig.nlper_dict_conf_dir)
  clear_has_nlper_dict_conf_dir();
  return nlper_dict_conf_dir_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ServerConfig::set_allocated_nlper_dict_conf_dir(::std::string* nlper_dict_conf_dir) {
  if (nlper_dict_conf_dir != NULL) {
    set_has_nlper_dict_conf_dir();
  } else {
    clear_has_nlper_dict_conf_dir();
  }
  nlper_dict_conf_dir_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nlper_dict_conf_dir);
  // @@protoc_insertion_point(field_set_allocated:nlper.ServerConfig.nlper_dict_conf_dir)
}

// required string nlper_conf_dir = 8;
inline bool ServerConfig::has_nlper_conf_dir() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ServerConfig::set_has_nlper_conf_dir() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ServerConfig::clear_has_nlper_conf_dir() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ServerConfig::clear_nlper_conf_dir() {
  nlper_conf_dir_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_nlper_conf_dir();
}
inline const ::std::string& ServerConfig::nlper_conf_dir() const {
  // @@protoc_insertion_point(field_get:nlper.ServerConfig.nlper_conf_dir)
  return nlper_conf_dir_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ServerConfig::set_nlper_conf_dir(const ::std::string& value) {
  set_has_nlper_conf_dir();
  nlper_conf_dir_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:nlper.ServerConfig.nlper_conf_dir)
}
inline void ServerConfig::set_nlper_conf_dir(const char* value) {
  set_has_nlper_conf_dir();
  nlper_conf_dir_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nlper.ServerConfig.nlper_conf_dir)
}
inline void ServerConfig::set_nlper_conf_dir(const char* value, size_t size) {
  set_has_nlper_conf_dir();
  nlper_conf_dir_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nlper.ServerConfig.nlper_conf_dir)
}
inline ::std::string* ServerConfig::mutable_nlper_conf_dir() {
  set_has_nlper_conf_dir();
  // @@protoc_insertion_point(field_mutable:nlper.ServerConfig.nlper_conf_dir)
  return nlper_conf_dir_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ServerConfig::release_nlper_conf_dir() {
  // @@protoc_insertion_point(field_release:nlper.ServerConfig.nlper_conf_dir)
  clear_has_nlper_conf_dir();
  return nlper_conf_dir_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ServerConfig::set_allocated_nlper_conf_dir(::std::string* nlper_conf_dir) {
  if (nlper_conf_dir != NULL) {
    set_has_nlper_conf_dir();
  } else {
    clear_has_nlper_conf_dir();
  }
  nlper_conf_dir_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nlper_conf_dir);
  // @@protoc_insertion_point(field_set_allocated:nlper.ServerConfig.nlper_conf_dir)
}

// required .nlper.ReqPreprocPluginConfig qdmatch_preproc_plugin = 9;
inline bool ServerConfig::has_qdmatch_preproc_plugin() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ServerConfig::set_has_qdmatch_preproc_plugin() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ServerConfig::clear_has_qdmatch_preproc_plugin() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ServerConfig::clear_qdmatch_preproc_plugin() {
  if (qdmatch_preproc_plugin_ != NULL) qdmatch_preproc_plugin_->::nlper::ReqPreprocPluginConfig::Clear();
  clear_has_qdmatch_preproc_plugin();
}
inline const ::nlper::ReqPreprocPluginConfig& ServerConfig::qdmatch_preproc_plugin() const {
  // @@protoc_insertion_point(field_get:nlper.ServerConfig.qdmatch_preproc_plugin)
  return qdmatch_preproc_plugin_ != NULL ? *qdmatch_preproc_plugin_
                         : *::nlper::ReqPreprocPluginConfig::internal_default_instance();
}
inline ::nlper::ReqPreprocPluginConfig* ServerConfig::mutable_qdmatch_preproc_plugin() {
  set_has_qdmatch_preproc_plugin();
  if (qdmatch_preproc_plugin_ == NULL) {
    qdmatch_preproc_plugin_ = new ::nlper::ReqPreprocPluginConfig;
  }
  // @@protoc_insertion_point(field_mutable:nlper.ServerConfig.qdmatch_preproc_plugin)
  return qdmatch_preproc_plugin_;
}
inline ::nlper::ReqPreprocPluginConfig* ServerConfig::release_qdmatch_preproc_plugin() {
  // @@protoc_insertion_point(field_release:nlper.ServerConfig.qdmatch_preproc_plugin)
  clear_has_qdmatch_preproc_plugin();
  ::nlper::ReqPreprocPluginConfig* temp = qdmatch_preproc_plugin_;
  qdmatch_preproc_plugin_ = NULL;
  return temp;
}
inline void ServerConfig::set_allocated_qdmatch_preproc_plugin(::nlper::ReqPreprocPluginConfig* qdmatch_preproc_plugin) {
  delete qdmatch_preproc_plugin_;
  qdmatch_preproc_plugin_ = qdmatch_preproc_plugin;
  if (qdmatch_preproc_plugin) {
    set_has_qdmatch_preproc_plugin();
  } else {
    clear_has_qdmatch_preproc_plugin();
  }
  // @@protoc_insertion_point(field_set_allocated:nlper.ServerConfig.qdmatch_preproc_plugin)
}

// required .nlper.ReqPostprocPluginConfig qdmatch_postproc_plugin = 10;
inline bool ServerConfig::has_qdmatch_postproc_plugin() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ServerConfig::set_has_qdmatch_postproc_plugin() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ServerConfig::clear_has_qdmatch_postproc_plugin() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ServerConfig::clear_qdmatch_postproc_plugin() {
  if (qdmatch_postproc_plugin_ != NULL) qdmatch_postproc_plugin_->::nlper::ReqPostprocPluginConfig::Clear();
  clear_has_qdmatch_postproc_plugin();
}
inline const ::nlper::ReqPostprocPluginConfig& ServerConfig::qdmatch_postproc_plugin() const {
  // @@protoc_insertion_point(field_get:nlper.ServerConfig.qdmatch_postproc_plugin)
  return qdmatch_postproc_plugin_ != NULL ? *qdmatch_postproc_plugin_
                         : *::nlper::ReqPostprocPluginConfig::internal_default_instance();
}
inline ::nlper::ReqPostprocPluginConfig* ServerConfig::mutable_qdmatch_postproc_plugin() {
  set_has_qdmatch_postproc_plugin();
  if (qdmatch_postproc_plugin_ == NULL) {
    qdmatch_postproc_plugin_ = new ::nlper::ReqPostprocPluginConfig;
  }
  // @@protoc_insertion_point(field_mutable:nlper.ServerConfig.qdmatch_postproc_plugin)
  return qdmatch_postproc_plugin_;
}
inline ::nlper::ReqPostprocPluginConfig* ServerConfig::release_qdmatch_postproc_plugin() {
  // @@protoc_insertion_point(field_release:nlper.ServerConfig.qdmatch_postproc_plugin)
  clear_has_qdmatch_postproc_plugin();
  ::nlper::ReqPostprocPluginConfig* temp = qdmatch_postproc_plugin_;
  qdmatch_postproc_plugin_ = NULL;
  return temp;
}
inline void ServerConfig::set_allocated_qdmatch_postproc_plugin(::nlper::ReqPostprocPluginConfig* qdmatch_postproc_plugin) {
  delete qdmatch_postproc_plugin_;
  qdmatch_postproc_plugin_ = qdmatch_postproc_plugin;
  if (qdmatch_postproc_plugin) {
    set_has_qdmatch_postproc_plugin();
  } else {
    clear_has_qdmatch_postproc_plugin();
  }
  // @@protoc_insertion_point(field_set_allocated:nlper.ServerConfig.qdmatch_postproc_plugin)
}

// required .nlper.ReqPreprocPluginConfig ddmatch_preproc_plugin = 11;
inline bool ServerConfig::has_ddmatch_preproc_plugin() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ServerConfig::set_has_ddmatch_preproc_plugin() {
  _has_bits_[0] |= 0x00000400u;
}
inline void ServerConfig::clear_has_ddmatch_preproc_plugin() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void ServerConfig::clear_ddmatch_preproc_plugin() {
  if (ddmatch_preproc_plugin_ != NULL) ddmatch_preproc_plugin_->::nlper::ReqPreprocPluginConfig::Clear();
  clear_has_ddmatch_preproc_plugin();
}
inline const ::nlper::ReqPreprocPluginConfig& ServerConfig::ddmatch_preproc_plugin() const {
  // @@protoc_insertion_point(field_get:nlper.ServerConfig.ddmatch_preproc_plugin)
  return ddmatch_preproc_plugin_ != NULL ? *ddmatch_preproc_plugin_
                         : *::nlper::ReqPreprocPluginConfig::internal_default_instance();
}
inline ::nlper::ReqPreprocPluginConfig* ServerConfig::mutable_ddmatch_preproc_plugin() {
  set_has_ddmatch_preproc_plugin();
  if (ddmatch_preproc_plugin_ == NULL) {
    ddmatch_preproc_plugin_ = new ::nlper::ReqPreprocPluginConfig;
  }
  // @@protoc_insertion_point(field_mutable:nlper.ServerConfig.ddmatch_preproc_plugin)
  return ddmatch_preproc_plugin_;
}
inline ::nlper::ReqPreprocPluginConfig* ServerConfig::release_ddmatch_preproc_plugin() {
  // @@protoc_insertion_point(field_release:nlper.ServerConfig.ddmatch_preproc_plugin)
  clear_has_ddmatch_preproc_plugin();
  ::nlper::ReqPreprocPluginConfig* temp = ddmatch_preproc_plugin_;
  ddmatch_preproc_plugin_ = NULL;
  return temp;
}
inline void ServerConfig::set_allocated_ddmatch_preproc_plugin(::nlper::ReqPreprocPluginConfig* ddmatch_preproc_plugin) {
  delete ddmatch_preproc_plugin_;
  ddmatch_preproc_plugin_ = ddmatch_preproc_plugin;
  if (ddmatch_preproc_plugin) {
    set_has_ddmatch_preproc_plugin();
  } else {
    clear_has_ddmatch_preproc_plugin();
  }
  // @@protoc_insertion_point(field_set_allocated:nlper.ServerConfig.ddmatch_preproc_plugin)
}

// required .nlper.ReqPostprocPluginConfig ddmatch_postproc_plugin = 12;
inline bool ServerConfig::has_ddmatch_postproc_plugin() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void ServerConfig::set_has_ddmatch_postproc_plugin() {
  _has_bits_[0] |= 0x00000800u;
}
inline void ServerConfig::clear_has_ddmatch_postproc_plugin() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void ServerConfig::clear_ddmatch_postproc_plugin() {
  if (ddmatch_postproc_plugin_ != NULL) ddmatch_postproc_plugin_->::nlper::ReqPostprocPluginConfig::Clear();
  clear_has_ddmatch_postproc_plugin();
}
inline const ::nlper::ReqPostprocPluginConfig& ServerConfig::ddmatch_postproc_plugin() const {
  // @@protoc_insertion_point(field_get:nlper.ServerConfig.ddmatch_postproc_plugin)
  return ddmatch_postproc_plugin_ != NULL ? *ddmatch_postproc_plugin_
                         : *::nlper::ReqPostprocPluginConfig::internal_default_instance();
}
inline ::nlper::ReqPostprocPluginConfig* ServerConfig::mutable_ddmatch_postproc_plugin() {
  set_has_ddmatch_postproc_plugin();
  if (ddmatch_postproc_plugin_ == NULL) {
    ddmatch_postproc_plugin_ = new ::nlper::ReqPostprocPluginConfig;
  }
  // @@protoc_insertion_point(field_mutable:nlper.ServerConfig.ddmatch_postproc_plugin)
  return ddmatch_postproc_plugin_;
}
inline ::nlper::ReqPostprocPluginConfig* ServerConfig::release_ddmatch_postproc_plugin() {
  // @@protoc_insertion_point(field_release:nlper.ServerConfig.ddmatch_postproc_plugin)
  clear_has_ddmatch_postproc_plugin();
  ::nlper::ReqPostprocPluginConfig* temp = ddmatch_postproc_plugin_;
  ddmatch_postproc_plugin_ = NULL;
  return temp;
}
inline void ServerConfig::set_allocated_ddmatch_postproc_plugin(::nlper::ReqPostprocPluginConfig* ddmatch_postproc_plugin) {
  delete ddmatch_postproc_plugin_;
  ddmatch_postproc_plugin_ = ddmatch_postproc_plugin;
  if (ddmatch_postproc_plugin) {
    set_has_ddmatch_postproc_plugin();
  } else {
    clear_has_ddmatch_postproc_plugin();
  }
  // @@protoc_insertion_point(field_set_allocated:nlper.ServerConfig.ddmatch_postproc_plugin)
}

// required .nlper.ReqPreprocPluginConfig semtopic_preproc_plugin = 13;
inline bool ServerConfig::has_semtopic_preproc_plugin() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void ServerConfig::set_has_semtopic_preproc_plugin() {
  _has_bits_[0] |= 0x00001000u;
}
inline void ServerConfig::clear_has_semtopic_preproc_plugin() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void ServerConfig::clear_semtopic_preproc_plugin() {
  if (semtopic_preproc_plugin_ != NULL) semtopic_preproc_plugin_->::nlper::ReqPreprocPluginConfig::Clear();
  clear_has_semtopic_preproc_plugin();
}
inline const ::nlper::ReqPreprocPluginConfig& ServerConfig::semtopic_preproc_plugin() const {
  // @@protoc_insertion_point(field_get:nlper.ServerConfig.semtopic_preproc_plugin)
  return semtopic_preproc_plugin_ != NULL ? *semtopic_preproc_plugin_
                         : *::nlper::ReqPreprocPluginConfig::internal_default_instance();
}
inline ::nlper::ReqPreprocPluginConfig* ServerConfig::mutable_semtopic_preproc_plugin() {
  set_has_semtopic_preproc_plugin();
  if (semtopic_preproc_plugin_ == NULL) {
    semtopic_preproc_plugin_ = new ::nlper::ReqPreprocPluginConfig;
  }
  // @@protoc_insertion_point(field_mutable:nlper.ServerConfig.semtopic_preproc_plugin)
  return semtopic_preproc_plugin_;
}
inline ::nlper::ReqPreprocPluginConfig* ServerConfig::release_semtopic_preproc_plugin() {
  // @@protoc_insertion_point(field_release:nlper.ServerConfig.semtopic_preproc_plugin)
  clear_has_semtopic_preproc_plugin();
  ::nlper::ReqPreprocPluginConfig* temp = semtopic_preproc_plugin_;
  semtopic_preproc_plugin_ = NULL;
  return temp;
}
inline void ServerConfig::set_allocated_semtopic_preproc_plugin(::nlper::ReqPreprocPluginConfig* semtopic_preproc_plugin) {
  delete semtopic_preproc_plugin_;
  semtopic_preproc_plugin_ = semtopic_preproc_plugin;
  if (semtopic_preproc_plugin) {
    set_has_semtopic_preproc_plugin();
  } else {
    clear_has_semtopic_preproc_plugin();
  }
  // @@protoc_insertion_point(field_set_allocated:nlper.ServerConfig.semtopic_preproc_plugin)
}

// required .nlper.ReqPostprocPluginConfig semtopic_postproc_plugin = 14;
inline bool ServerConfig::has_semtopic_postproc_plugin() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void ServerConfig::set_has_semtopic_postproc_plugin() {
  _has_bits_[0] |= 0x00002000u;
}
inline void ServerConfig::clear_has_semtopic_postproc_plugin() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void ServerConfig::clear_semtopic_postproc_plugin() {
  if (semtopic_postproc_plugin_ != NULL) semtopic_postproc_plugin_->::nlper::ReqPostprocPluginConfig::Clear();
  clear_has_semtopic_postproc_plugin();
}
inline const ::nlper::ReqPostprocPluginConfig& ServerConfig::semtopic_postproc_plugin() const {
  // @@protoc_insertion_point(field_get:nlper.ServerConfig.semtopic_postproc_plugin)
  return semtopic_postproc_plugin_ != NULL ? *semtopic_postproc_plugin_
                         : *::nlper::ReqPostprocPluginConfig::internal_default_instance();
}
inline ::nlper::ReqPostprocPluginConfig* ServerConfig::mutable_semtopic_postproc_plugin() {
  set_has_semtopic_postproc_plugin();
  if (semtopic_postproc_plugin_ == NULL) {
    semtopic_postproc_plugin_ = new ::nlper::ReqPostprocPluginConfig;
  }
  // @@protoc_insertion_point(field_mutable:nlper.ServerConfig.semtopic_postproc_plugin)
  return semtopic_postproc_plugin_;
}
inline ::nlper::ReqPostprocPluginConfig* ServerConfig::release_semtopic_postproc_plugin() {
  // @@protoc_insertion_point(field_release:nlper.ServerConfig.semtopic_postproc_plugin)
  clear_has_semtopic_postproc_plugin();
  ::nlper::ReqPostprocPluginConfig* temp = semtopic_postproc_plugin_;
  semtopic_postproc_plugin_ = NULL;
  return temp;
}
inline void ServerConfig::set_allocated_semtopic_postproc_plugin(::nlper::ReqPostprocPluginConfig* semtopic_postproc_plugin) {
  delete semtopic_postproc_plugin_;
  semtopic_postproc_plugin_ = semtopic_postproc_plugin;
  if (semtopic_postproc_plugin) {
    set_has_semtopic_postproc_plugin();
  } else {
    clear_has_semtopic_postproc_plugin();
  }
  // @@protoc_insertion_point(field_set_allocated:nlper.ServerConfig.semtopic_postproc_plugin)
}

inline const ServerConfig* ServerConfig::internal_default_instance() {
  return &ServerConfig_default_instance_.get();
}
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace nlper

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_nlper_2eproto__INCLUDED
